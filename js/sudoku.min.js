/*
 * file: sudoku.min.js
 *
 * This file contains a 9x9 Sudoku solver, generator, and interface controllers for interactive use.
 * For more information and a non-minified version, please visit: http://www.calvinrempel.com/project.php?p=sudoku
 *
 * author: Calvin Rempel
 * date: July 15, 2014
 */
function randomizeList(list){var elementsRemaining,i,temp;elementsRemaining=list.length;while(elementsRemaining>0){i=Math.floor(Math.random()*elementsRemaining);temp=list[elementsRemaining-1];list[elementsRemaining-1]=list[i];list[i]=temp;elementsRemaining-=1;}
return list;};function SudokuBoard(){var self=this,cells;self.NO_VALUE=0;self.reset=function(){var x,y;cells=[];for(x=0;x<9;x+=1){cells[x]=[];for(y=0;y<9;y+=1){cells[x][y]=self.NO_VALUE;}}};self.getValue=function(x,y){if(x<0||x>8||y<0||y>8){throw"Invalid Argument in SudokuBoard.getValue( "+x+", "+y+" )";}
return cells[x][y];};self.getValueArray=function(){return cells;};self.setValue=function(x,y,value){if(x<0||x>8||y<0||y>8||value%1!==0||value<0||value>9){throw"Invalid Argument in SudokuBoard.setValue( "+x+", "+y+", "+value+" )";}
cells[x][y]=value;};self.setValueArray=function(boardGrid){cells=boardGrid;};self.equals=function(other){var x,y;for(x=0;x<9;x+=1){for(y=0;y<9;y+=1){if(self.getValue(x,y)!=other.getValue(x,y)){return false;}}}
return true;};}
function SudokuSolver(){var self=this,NUMBER_MASK=[0,1,2,4,8,16,32,64,128,256],rowContents=[],colContents=[],regContents=[],POSSIBLE_VALUES=[1,2,3,4,5,6,7,8,9],board,solutions,rand;self.solve=function(boardGrid,solutionContainer,random){var i;board=boardGrid;rand=random;solutions=solutionContainer;solutionContainer.count=0;for(i=0;i<9;i+=1){rowContents[i]=NUMBER_MASK[0];colContents[i]=NUMBER_MASK[0];regContents[i]=NUMBER_MASK[0];}
if(!prefillContentArrays()){solutionContainer.count=0;}else{solveRecursive(0,0,solutionContainer,random);}
return solutionContainer;};self.getSolutionContainer=function(maxSolutions){var solutionContainer,i,j;solutionContainer={count:0,solutions:[]};for(i=0;i<maxSolutions;i+=1){solutionContainer.solutions[i]=[];for(j=0;j<9;j+=1){solutionContainer.solutions[i][j]=[];}}
return solutionContainer;};function solveRecursive(row,col){var i,reg,nextRow,nextCol,values;values=POSSIBLE_VALUES;if(rand){values=POSSIBLE_VALUES.slice(0);randomizeList(values);}
if(row===9||col===9){solutions.count+=1;return;}
reg=(Math.floor(row/3)*3)+Math.floor(col/3);nextCol=(col+1)%9;nextRow=(nextCol<col)?row+1:row;if(board[row][col]!==0){solutions.solutions[solutions.count][row][col]=board[row][col];solveRecursive(nextRow,nextCol);}else{for(i=0;i<9;i+=1){if((rowContents[row]&NUMBER_MASK[values[i]])===NUMBER_MASK[0]&&(colContents[col]&NUMBER_MASK[values[i]])===NUMBER_MASK[0]&&(regContents[reg]&NUMBER_MASK[values[i]])===NUMBER_MASK[0]){solutions.solutions[solutions.count][row][col]=values[i];rowContents[row]=rowContents[row]^NUMBER_MASK[values[i]];colContents[col]=colContents[col]^NUMBER_MASK[values[i]];regContents[reg]=regContents[reg]^NUMBER_MASK[values[i]];solveRecursive(nextRow,nextCol);if(solutions.count>=solutions.solutions.length){return;}
rowContents[row]=rowContents[row]&~NUMBER_MASK[values[i]];colContents[col]=colContents[col]&~NUMBER_MASK[values[i]];regContents[reg]=regContents[reg]&~NUMBER_MASK[values[i]];}}}
return;}
function prefillContentArrays(){var row,col,reg,val;for(row=0;row<9;row+=1){for(col=0;col<9;col+=1){val=board[row][col];reg=(Math.floor(row/3)*3)+Math.floor(col/3);if(val!==0){if(((rowContents[row]&NUMBER_MASK[val])===NUMBER_MASK[0]&&(colContents[col]&NUMBER_MASK[val])===NUMBER_MASK[0]&&(regContents[reg]&NUMBER_MASK[val])===NUMBER_MASK[0])){rowContents[row]=rowContents[row]^NUMBER_MASK[val];colContents[col]=colContents[col]^NUMBER_MASK[val];regContents[reg]=regContents[reg]^NUMBER_MASK[val];}else{return false;}}}}
return true;}}
function SudokuGenerator(){var self=this;self.generateBoard=function(strictMinimal){var board,solver,solutions;board=new SudokuBoard();board.reset();solver=new SudokuSolver();solutions=solver.getSolutionContainer(1);solver.solve(board.getValueArray(),solutions,true);board.setValueArray(solutions.solutions[0]);removeClues(board,solver,strictMinimal);return board;};function removeClues(board,solver,strictMinimal){var solutions,cells;solutions=solver.getSolutionContainer(2);cells=randomizeList(getSymmetries());cells=removeQuads(board,solver,solutions,cells);cells=removePairs(board,solver,solutions,cells);if(strictMinimal){removeSingles(board,solver,solutions,cells);}
return board;}
function removeQuads(board,solver,solutions,cells){var vals,i,j,notRemoved;notRemoved=[];vals=[];for(i=0;i<cells.length;i+=1){for(j=0;j<cells[i].length;j+=1){vals[j]=board.getValue(cells[i][j].X,cells[i][j].Y);board.setValue(cells[i][j].X,cells[i][j].Y,board.NO_VALUE);}
solver.solve(board.getValueArray(),solutions,false);if(solutions.count!==1){notRemoved[notRemoved.length]=cells[i];for(j=0;j<cells[i].length;j+=1){board.setValue(cells[i][j].X,cells[i][j].Y,vals[j]);}}}
return notRemoved;}
function removePairs(board,solver,solutions,cells){var vals,i,j,cellList,notRemoved;notRemoved=[];vals=[];for(i=0;i<cells.length;i+=1){cellList=cells[i];if(cellList.length===4){for(j=0;j<=2;j+=2){vals[0]=board.getValue(cellList[j].X,cellList[j].Y);vals[1]=board.getValue(cellList[j+1].X,cellList[j+1].Y);board.setValue(cellList[j].X,cellList[j].Y,board.NO_VALUE);board.setValue(cellList[j+1].X,cellList[j+1].Y,board.NO_VALUE);solver.solve(board.getValueArray(),solutions,false);if(solutions.count!==1){notRemoved[notRemoved.length]=cellList[j];notRemoved[notRemoved.length]=cellList[j+1];board.setValue(cellList[j].X,cellList[j].Y,vals[0]);board.setValue(cellList[j+1].X,cellList[j+1].Y,vals[1]);}else{break;}}}else{for(j=0;j<cellList.length;j+=1){notRemoved[notRemoved.length]=cellList[j];}}}
return notRemoved;}
function removeSingles(board,solver,solutions,cells){var val,i;for(i=0;i<cells.length;i+=1){val=board.getValue(cells[i].X,cells[i].Y);board.setValue(cells[i].X,cells[i].Y,board.NO_VALUE);solver.solve(board.getValueArray(),solutions,false);if(solutions.count!==1){board.setValue(cells[i].X,cells[i].Y,val);}}}
function getSymmetries(){var retval,cells,i;retval=[];cells=getFirstQuarterCells();for(i=0;i<cells.length;i+=1){retval[i]=getSymmetricalCells(cells[i].X,cells[i].Y);}
return retval;}
function getFirstQuarterCells(){var row,col,list,limit;list=[];limit=Math.ceil(9/2);for(row=0;row<limit;row+=1){for(col=0;col<limit;col+=1){list[list.length]={X:col,Y:row};}}
return list;}
function getSymmetricalCells(x,y){var cells;cells=[{X:x,Y:y}];if(x===4&&y!==4){cells[cells.length]={X:4,Y:8-y};}else if(y===4&&x!==4){cells[cells.length]={X:8-x,Y:4};}else if(x!==4||y!==4){cells[cells.length]={X:8-x,Y:8-y};cells[cells.length]={X:x,Y:8-y};cells[cells.length]={X:8-x,Y:y};}
return cells;}}
function SudokuGame(elements){var board,boardSolution,showIncorrect,minimalPuzzle,generator,activePage,solver,solutions,timer,time;function init(){initScreens();generateSudokuHTML();initEventHandlers();solver=new SudokuSolver();solutions=solver.getSolutionContainer(2);boardSolution=new SudokuBoard();}
function initScreens(){elements.overlay.style.display='none';elements.pauseScreen.style.display='none';elements.returnToMenu.style.display='none';elements.puzzleParamScreen.style.display='none';elements.workingScreen.style.display='none';elements.playScreen.style.display='none';elements.completionScreen.style.display='none';elements.solverScreen.style.display='none';elements.clearScreen.style.display='none';elements.helpScreen.style.display='none';activePage=elements.mainMenu;}
function initEventHandlers(){initCheckboxEventHandler();initPlayableBoardCellEventHandler();initSolverBoardCellEventHandler();bindEvent(elements.generateButton,'click',gotoPuzzleParams);bindEvent(elements.solverButton,'click',gotoSolver);bindEvent(elements.helpButton,'click',gotoHelp);bindEvent(elements.resumeButton,'click',resumePuzzle);bindEvent(elements.printButton,'click',printPuzzle);bindEvent(elements.confirmReturnButton,'click',gotoMainMenu);bindEvent(elements.cancelReturnButton,'click',cancelReturn);bindEvent(elements.showIncorrectCheckbox,'click',updateShowIncorrect);bindEvent(elements.minPuzzleCheckbox,'click',updateMinimalPuzzle);bindEvent(elements.generatePuzzleButton,'click',gotoPlayableSudoku);bindEvent(elements.pauseButton,'click',pausePuzzle);bindEvent(elements.menuButton,'click',confirmReturnToMenu);bindEvent(elements.completionButton,'click',gotoMainMenu);bindEvent(elements.solverMenuButton,'click',confirmReturnToMenu);bindEvent(elements.solveButton,'click',solvePuzzle);bindEvent(elements.clearButton,'click',showClearMenu);bindEvent(elements.clearAllButton,'click',clearAll);bindEvent(elements.clearSolvedButton,'click',clearSolved);bindEvent(elements.cancelClearButton,'click',cancelReturn);bindEvent(elements.helpMenuButton,'click',gotoMainMenu);}
function initPlayableBoardCellEventHandler(){var cells,i;cells=elements.playableSudoku.getElementsByTagName('td');for(i=0;i<cells.length;i+=1){if(cells[i].className.indexOf('horizontal-divider')===-1&&cells[i].className.indexOf('vertical-divider')===-1){bindEvent(cells[i],'change',playableCellChanged);}}}
function initSolverBoardCellEventHandler(){var cells,i;cells=elements.solverSudoku.getElementsByTagName('td');for(i=0;i<cells.length;i+=1){if(cells[i].className.indexOf('horizontal-divider')===-1&&cells[i].className.indexOf('vertical-divider')===-1){bindEvent(cells[i],'change',solverCellChanged);}}}
function initCheckboxEventHandler(){var boxes,i;boxes=elements.container.getElementsByClassName('checkbox');for(i=0;i<boxes.length;i+=1){bindEvent(boxes[i],'click',checkboxClicked);}}
function generateSudokuHTML(){var i,html,x,y;html='<table>';for(y=0;y<9;y+=1){html+='<tr>';for(x=0;x<9;x+=1){html+='<td data-x="'+x+'" data-y="'+y+'"></td>';if(x===2||x===5){html+='<td class="horizontal-divider"></td>';}}
html+='</tr>';if(y===2||y===5){html+='<tr class="vertical-divider"></tr>';}}
html+='</table>';for(i=0;i<elements.sudokuBoards.length;i+=1){elements.sudokuBoards[i].innerHTML=html;}}
function populatePlayableBoard(){var x,y,val,inputHTML,cells;inputHTML='<input class="scratch" type="text" maxlength="8">'+'<input class="answer" type="text" maxlength="1" />';cells=elements.playableSudoku.getElementsByTagName('td');for(i=0;i<cells.length;i+=1){if(cells[i].className.indexOf('horizontal-divider')===-1&&cells[i].className.indexOf('vertical-divider')===-1){x=cells[i].dataset.x;y=cells[i].dataset.y;val=board.getValue(x,y);val=(val===board.NO_VALUE)?inputHTML:val;cells[i].innerHTML=val;}}}
function populateSolverBoard(){var inputHTML,cells;inputHTML='<input class="answer" type="text" maxlength="1" />';cells=elements.solverSudoku.getElementsByTagName('td');for(i=0;i<cells.length;i+=1){if(cells[i].className.indexOf('horizontal-divider')===-1&&cells[i].className.indexOf('vertical-divider')===-1){cells[i].innerHTML=inputHTML;}}}
function bindEvent(element,event,handler){if(element.addEventListener){element.addEventListener(event,handler,false);}else{element.attachEvent('on'+event,handler);}}
function isChecked(element){var checkmark=element.getElementsByTagName('div');return checkmark[0].className==='checked';}
function checkboxClicked(e){var checkmark=e.target;if(checkmark.className.indexOf('checkbox')!==-1){checkmark=checkmark.firstChild;}
if(checkmark.className==='unchecked'){checkmark.className='checked';}else{checkmark.className='unchecked';}}
function gotoPuzzleParams(){switchPage(elements.puzzleParamScreen);return false;}
function gotoSolver(){board=new SudokuBoard();board.reset();populateSolverBoard();elements.solveMessage.innerHTML='Enter Values and Click Solve';switchPage(elements.solverScreen);return false;}
function gotoHelp(){switchPage(elements.helpScreen);return false;}
function resumePuzzle(){elements.overlay.style.display='none';elements.pauseScreen.style.display='none';startTimer();return false;}
function printPuzzle(){window.print();}
function gotoMainMenu(){elements.overlay.style.display='none';elements.returnToMenu.style.display='none';elements.completionScreen.style.display='none';switchPage(elements.mainMenu);return false;}
function cancelReturn(){elements.overlay.style.display='none';elements.returnToMenu.style.display='none';elements.clearScreen.style.display='none';if(activePage===elements.playScreen){startTimer();}
return false;}
function updateShowIncorrect(){showIncorrect=isChecked(elements.showIncorrectCheckbox);}
function updateMinimalPuzzle(){minimalPuzzle=isChecked(elements.minPuzzleCheckbox);}
function gotoPlayableSudoku(){switchPage(elements.workingScreen);setTimeout(function(){generatePuzzle(minimalPuzzle);populatePlayableBoard();clearWrongAnswers();switchPage(elements.playScreen);time=0;startTimer();},100);return false;}
function pausePuzzle(){elements.overlay.style.display='block';elements.pauseScreen.style.display='block';clearInterval(timer);return false;}
function confirmReturnToMenu(){elements.overlay.style.display='block';elements.returnToMenu.style.display='block';clearInterval(timer);return false;}
function playableCellChanged(e){var data,val;if(e.target.className.indexOf('answer')!==-1){data=e.target.parentNode.dataset;val=board.getValue(data.x,data.y);if(e.target.value===''||e.target.value===' '){e.target.value='';e.target.parentNode.className='';board.setValue(data.x,data.y,board.NO_VALUE);}else if(e.target.value==0){e.target.value=(val===board.NO_VALUE)?'':val;}else{try{board.setValue(data.x,data.y,e.target.value);checkCorrectness(data.x,data.y,e.target);}catch(msg){e.target.value=(val===board.NO_VALUE)?'':val;}}}
return false;}
function solverCellChanged(e){var data,val,changed;val=e.target.value;data=e.target.parentNode.dataset;changed=false;if(val===' '||val===''){e.target.value='';board.setValue(data.x,data.y,board.NO_VALUE);changed=true;}else if(val==0){val=board.getValue(data.x,data.y);e.target.value=(val===board.NO_VALUE)?'':val;changed=true;}else{try{board.setValue(data.x,data.y,val);changed=true;}catch(msg){val=board.getValue(data.x,data.y);e.target.value=(val===board.NO_VALUE)?'':val;}}
if(changed){e.target.parentNode.className='';}
return false;}
function solvePuzzle(){solver.solve(board.getValueArray(),solutions,true);if(solutions.count===0){elements.solveMessage.innerHTML='The Puzzle has No Solutions';clearSolvedCells();}else if(solutions.count===1){elements.solveMessage.innerHTML='The Puzzle has a Unique Solution!';fillSolverBoard(solutions.solutions[0]);}else{elements.solveMessage.innerHTML='The Puzzle has Multiple Solutions';fillSolverBoard(solutions.solutions[0]);}}
function showClearMenu(){elements.overlay.style.display='block';elements.clearScreen.style.display='block';}
function clearSolved(){elements.overlay.style.display='none';elements.clearScreen.style.display='none';clearSolvedCells();elements.solveMessage.innerHTML='Solved Squares Have Been Removed!';}
function clearAll(){var cells,i;elements.overlay.style.display='none';elements.clearScreen.style.display='none';cells=elements.solverSudoku.getElementsByTagName('input');for(i=0;i<cells.length;i+=1){cells[i].value='';cells[i].parentNode.className='';}
board.reset();elements.solveMessage.innerHTML='Board Cleared!';}
function checkCorrectness(x,y,cell){var i;if(board.equals(boardSolution)){showCompletionScreen();}else if(showIncorrect){cell=cell.parentNode;if(board.getValue(x,y)!=boardSolution.getValue(x,y)){if(cell.className.indexOf(' wrong')==-1){cell.className+=' wrong';}}else{i=cell.className.indexOf(' wrong');if(i!=-1){cell.className=cell.className.slice(0,i)+cell.className.slice(i+6);}}}}
function clearWrongAnswers(){var cells;cells=elements.playableSudoku.getElementsByClassName('wrong');while(cells.length!==0){cells[0].className='';}}
function fillSolverBoard(valueArray){var cells,i,data;cells=elements.solverSudoku.getElementsByTagName('input');for(i=0;i<cells.length;i+=1){if((cells[i].value==''||cells[i].parentNode.className==='solved')&&cells[i].parentNode.className.indexOf('horizontal-divider')===-1&&cells[i].parentNode.className.indexOf('vertical-divider')===-1){data=cells[i].parentNode.dataset;cells[i].value=valueArray[data.x][data.y];cells[i].parentNode.className='solved';}}}
function clearSolvedCells(){var cells,input;cells=elements.solverSudoku.getElementsByClassName('solved');while(cells.length!==0){input=cells[0].getElementsByTagName('input');input[0].value='';cells[0].className='';}}
function startTimer(){var min,sec;min=Math.floor(time/60);sec=time-(min*60);sec=(sec<10)?'0'+sec:sec;elements.timeDisplay.innerHTML=min+':'+sec;timer=setInterval(function(){var min,sec;time+=1;min=Math.floor(time/60);sec=time-(min*60);sec=(sec<10)?'0'+sec:sec;elements.timeDisplay.innerHTML=min+':'+sec;},1000);}
function generatePuzzle(strictMinimal){if(!generator){generator=new SudokuGenerator();}
board=generator.generateBoard(strictMinimal);solver.solve(board.getValueArray(),solutions,false);boardSolution.setValueArray(solutions.solutions[0]);}
function switchPage(newPage){activePage.style.display='none';activePage=newPage;activePage.style.display='block';}
function showCompletionScreen(){var min,sec;min=Math.floor(time/60);sec=time-(min*60);clearInterval(timer);elements.completionTime.innerHTML=min+' Minutes and '+sec+' Seconds!';elements.overlay.style.display='block';elements.completionScreen.style.display='block';}
init();}